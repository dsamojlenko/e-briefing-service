<?php

namespace Tests\Feature\Http\Controllers;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * @see \App\Http\Controllers\EventParticipantsController
 */
class EventParticipantsControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function add_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Event::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('events.participants.add', [$event]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Event::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('events.participants.create', [$event]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function remove_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Event::class)->create();
        $person = factory(\App\Person::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('events.participants.remove', [$event, $person]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Event::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('events.participants.store', [$event]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\EventParticipantsController::class,
            'store',
            \App\Http\Requests\StorePerson::class
        );
    }

    // test cases...
}
